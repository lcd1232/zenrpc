// Code generated by zenrpc; DO NOT EDIT.

package content2

import (
	"encoding/json"

	"github.com/lcd1232/zenrpc/v3"
	"github.com/lcd1232/zenrpc/v3/smd"
)

var RPC = struct {
	Service struct{ Login string }
}{
	Service: struct{ Login string }{
		Login: "login",
	},
}

func (Service) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Login": {
				Description: `Login log in user and create new session.`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "email",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "password",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s Service) Invoke(c zenrpc.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.Service.Login:
		var args = struct {
			Email    string `json:"email"`
			Password string `json:"password"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"email", "password"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Login(c, args.Email, args.Password))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
